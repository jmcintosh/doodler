{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","ts/doodler.ts","ts/main.ts"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","Doodler","id","parent","width","height","this","_canvas","document","createElement","getElementById","appendChild","_ctx","getContext","start_draw_listeners","set_line_weight","prototype","test_circle","beginPath","arc","Math","PI","stroke","console","log","_bound_start_drawing","start_drawing","bind","_bound_stop_drawing","stop_drawing","addEventListener","stop_draw_listeners","removeEventListener","lineWidth","evt","_bound_draw","draw","x","offsetX","y","offsetY","moveTo","fillRect","lineTo","clear_canvas","clearRect","save_image","saved_image","toDataURL","load_image","image","Image","src","drawImage","doodler_1","doodler","clear_btn","save_btn","load_btn"],"mappings":"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","file":"doodler.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","//import HTMLCanvasElement from\r\n\r\nexport class Doodler {\r\n    private _canvas: HTMLCanvasElement\r\n    private _ctx: CanvasRenderingContext2D\r\n\r\n    private _bound_draw: EventListenerObject\r\n    private _bound_start_drawing: EventListenerObject\r\n    private _bound_stop_drawing: EventListenerObject\r\n\r\n    private saved_image: string\r\n\r\n    constructor( id: string, parent: string, width: number, height: number) {\r\n        this._canvas = document.createElement(\"canvas\")\r\n        this._canvas.id = id\r\n        this._canvas.width = width\r\n        this._canvas.height = height\r\n        document.getElementById(parent).appendChild(this._canvas)\r\n\r\n        this._ctx = this._canvas.getContext(\"2d\")\r\n\r\n        this.start_draw_listeners()\r\n        this.set_line_weight(2)\r\n    }\r\n\r\n    test_circle() {\r\n        this._ctx.beginPath()\r\n        this._ctx.arc(95,50,40,0,2*Math.PI)\r\n        this._ctx.stroke()\r\n    } \r\n\r\n    start_draw_listeners(){\r\n        console.log(\"Doodler:start_draw_listeners\")\r\n        // this._canvas.addEventListener()\r\n        this._bound_start_drawing = this.start_drawing.bind(this)\r\n        this._bound_stop_drawing = this.stop_drawing.bind(this)\r\n\r\n        this._canvas.addEventListener(\"mousedown\", this._bound_start_drawing, false)\r\n        this._canvas.addEventListener(\"mouseup\", this._bound_stop_drawing, false)\r\n    }\r\n\r\n    stop_draw_listeners(){\r\n        console.log(\"Doodler:stop_draw_listeners\")\r\n        this._canvas.removeEventListener(\"mousedown\", this._bound_start_drawing, false)\r\n        this._canvas.removeEventListener(\"mouseup\", this._bound_stop_drawing, false)\r\n    }\r\n\r\n    set_line_weight(width: number){\r\n        this._ctx.lineWidth = width\r\n    }\r\n\r\n    start_drawing(evt: MouseEvent){\r\n        // console.group(\"Doodler::start_drawing\")\r\n        // console.log(evt)\r\n        // console.log(evt.offsetX, evt.offsetY)\r\n        // console.groupEnd()\r\n        this._bound_draw = this.draw.bind(this)\r\n        this._canvas.addEventListener(\"mousemove\", this._bound_draw, false)\r\n\r\n        let x = evt.offsetX, y = evt.offsetY\r\n        \r\n        this._ctx.beginPath()\r\n        this._ctx.moveTo(x,y)\r\n        let width = this._ctx.lineWidth\r\n        x = x - width/2\r\n        y = y - width/2\r\n        this._ctx.fillRect( x, y, width, width ); // adds a single pixel\r\n    }\r\n\r\n    draw(evt: MouseEvent){\r\n        // console.group(\"Doodler::draw\")\r\n        // console.log(evt.offsetX, evt.offsetY)\r\n        // console.groupEnd()\r\n\r\n        let x = evt.offsetX, y = evt.offsetY\r\n        this._ctx.lineTo(x,y)\r\n        this._ctx.stroke()\r\n\r\n    }\r\n\r\n    stop_drawing(evt: MouseEvent){\r\n        // console.group(\"Doodler::stop_drawing\")\r\n        // console.log(evt.offsetX, evt.offsetY)\r\n        // console.groupEnd()\r\n        this._canvas.removeEventListener(\"mousemove\", this._bound_draw, false)\r\n        this._canvas.removeEventListener\r\n\r\n        let x = evt.offsetX, y = evt.offsetY\r\n        this._ctx.lineTo(x,y)\r\n        let width = this._ctx.lineWidth\r\n        x = x - width/2\r\n        y = y - width/2\r\n        this._ctx.fillRect( x, y, width, width ); // adds a single pixel\r\n        \r\n        this._ctx.stroke()\r\n\r\n    }\r\n\r\n    clear_canvas(){\r\n        console.log(\"Doodler::clear_canvas\")\r\n        this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height)\r\n        this._ctx.beginPath() // call this just for safety\r\n    }\r\n\r\n    save_image(){\r\n        console.log(\"Doodler::save_canvas_blob\")\r\n        this.saved_image = this._canvas.toDataURL('image/png')\r\n    }\r\n\r\n    load_image(){\r\n        console.log(\"Doodler::load_canvas_blob\")\r\n        let image = new Image()\r\n        image.src = this.saved_image\r\n        this._ctx.drawImage(image,0,0)\r\n    }\r\n\r\n}","import {Doodler} from \"./doodler\"\r\n\r\nlet doodler = new Doodler('doodler-canvas',\"doodler-container\", 800, 600)\r\n\r\n\r\n// hook up event buttons\r\nlet clear_btn = document.getElementById(\"clear\")\r\nlet save_btn = document.getElementById(\"save\")\r\nlet load_btn = document.getElementById(\"load\")\r\n\r\nclear_btn.addEventListener(\"click\", doodler.clear_canvas.bind(doodler))\r\nsave_btn.addEventListener(\"click\", doodler.save_image.bind(doodler))\r\nload_btn.addEventListener(\"click\", doodler.load_image.bind(doodler))"],"sourceRoot":"/source/"}